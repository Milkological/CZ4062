==16692== Memcheck, a memory error detector
==16692== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16692== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==16692== Command: ./opj_compress -i in/poc6.bmp -o out/poc6.j2k
==16692== 
==16692== Syscall param msg->desc.port.name points to uninitialised byte(s)
==16692==    at 0x1004A834A: mach_msg_trap (in /usr/lib/system/libsystem_kernel.dylib)
==16692==    by 0x1004A7796: mach_msg (in /usr/lib/system/libsystem_kernel.dylib)
==16692==    by 0x1004A1485: task_set_special_port (in /usr/lib/system/libsystem_kernel.dylib)
==16692==    by 0x10063D10E: _os_trace_create_debug_control_port (in /usr/lib/system/libsystem_trace.dylib)
==16692==    by 0x10063D458: _libtrace_init (in /usr/lib/system/libsystem_trace.dylib)
==16692==    by 0x1001A69DF: libSystem_initializer (in /usr/lib/libSystem.B.dylib)
==16692==    by 0x100036A1A: ImageLoaderMachO::doModInitFunctions(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==16692==    by 0x100036C1D: ImageLoaderMachO::doInitialization(ImageLoader::LinkContext const&) (in /usr/lib/dyld)
==16692==    by 0x1000324A9: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==16692==    by 0x100032440: ImageLoader::recursiveInitialization(ImageLoader::LinkContext const&, unsigned int, char const*, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==16692==    by 0x100031523: ImageLoader::processInitializers(ImageLoader::LinkContext const&, unsigned int, ImageLoader::InitializerTimingList&, ImageLoader::UninitedUpwards&) (in /usr/lib/dyld)
==16692==    by 0x1000315B8: ImageLoader::runInitializers(ImageLoader::LinkContext const&, ImageLoader::InitializerTimingList&) (in /usr/lib/dyld)
==16692==  Address 0x1048a9cec is on thread 1's stack
==16692==  in frame #2, created by task_set_special_port (???:)
==16692== 

==16692== Warning: set address range perms: large range [0x154000040, 0x254000044) (defined)
==16692== Warning: set address range perms: large range [0x259c3a040, 0x359c3a044) (defined)
==16692== Warning: set address range perms: large range [0x359c3b040, 0x459c3b044) (defined)
==16692== Invalid read of size 1
==16692==    at 0x10000D5C4: bmptoimage (in ./opj_compress)
==16692==    by 0x1000028D5: main (in ./opj_compress)
==16692==  Address 0x100c8bce5 is 1 bytes after a block of size 4 alloc'd
==16692==    at 0x1000B6C7A: calloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==16692==    by 0x10000C978: bmptoimage (in ./opj_compress)
==16692==    by 0x1000028D5: main (in ./opj_compress)
==16692== 
==16692== Invalid read of size 1
==16692==    at 0x10000D5CF: bmptoimage (in ./opj_compress)
==16692==    by 0x1000028D5: main (in ./opj_compress)
==16692==  Address 0x100c8bce4 is 0 bytes after a block of size 4 alloc'd
==16692==    at 0x1000B6C7A: calloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==16692==    by 0x10000C978: bmptoimage (in ./opj_compress)
==16692==    by 0x1000028D5: main (in ./opj_compress)
==16692== 
==16692== Invalid read of size 1
==16692==    at 0x10000D5D8: bmptoimage (in ./opj_compress)
==16692==    by 0x1000028D5: main (in ./opj_compress)
==16692==  Address 0x100c8bce6 is 2 bytes after a block of size 4 alloc'd
==16692==    at 0x1000B6C7A: calloc (in /usr/local/Cellar/valgrind/3.13.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==16692==    by 0x10000C978: bmptoimage (in ./opj_compress)
==16692==    by 0x1000028D5: main (in ./opj_compress)
==16692== 
==16692== 
==16692== Process terminating with default action of signal 11 (SIGSEGV)
==16692==  Access not within mapped region at address 0x101082000
==16692==    at 0x10000D5C4: bmptoimage (in ./opj_compress)
==16692==    by 0x1000028D5: main (in ./opj_compress)
==16692==  If you believe this happened as a result of a stack
==16692==  overflow in your program's main thread (unlikely but
==16692==  possible), you can try to increase the size of the
==16692==  main thread stack using the --main-stacksize= flag.
==16692==  The main thread stack size used in this run was 8388608.
==16692== 
==16692== HEAP SUMMARY:
==16692==     in use at exit: 12,884,924,357 bytes in 169 blocks
==16692==   total heap usage: 185 allocs, 16 frees, 12,884,930,501 bytes allocated
==16692== 
==16692== LEAK SUMMARY:
==16692==    definitely lost: 48 bytes in 1 blocks
==16692==    indirectly lost: 192 bytes in 1 blocks
==16692==      possibly lost: 4,294,967,372 bytes in 4 blocks
==16692==    still reachable: 8,589,938,900 bytes in 10 blocks
==16692==         suppressed: 17,845 bytes in 153 blocks
==16692== Rerun with --leak-check=full to see details of leaked memory
==16692== 
==16692== For counts of detected and suppressed errors, rerun with: -v
==16692== Use --track-origins=yes to see where uninitialised values come from
==16692== ERROR SUMMARY: 4153900 errors from 4 contexts (suppressed: 4 from 4)
